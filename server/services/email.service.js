// server/services/email.service.js
const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
const handlebars = require('handlebars');
const PDFDocument = require('pdfkit');
const moment = require('moment');
const axios = require('axios');
const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY

class EmailService {
  constructor() {
    // V√©rifier si les variables essentielles sont d√©finies
    if (!process.env.EMAIL_HOST || !process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
      console.error('‚ö†Ô∏è ATTENTION: Configuration email incompl√®te - le service ne fonctionnera pas correctement');
      
      // En mode d√©veloppement, utiliser un transporteur de test
      if (process.env.NODE_ENV === 'development') {
        console.log('Mode d√©veloppement d√©tect√©, utilisation du transporteur de test...');
        this.setupTestTransporter();
        return;
      }
    }

    // Cr√©ation du transporteur Nodemailer
    try {
      this.transporter = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT || 587,
        secure: process.env.EMAIL_SECURE === 'true',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASSWORD,
        },
      });
      
      // V√©rifier la connexion au serveur SMTP
      this.verifyTransporter();
      
      // Initialisation des templates
      this.initializeTemplates();
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du transporteur email:', error);
    }
  }
  
  // Cr√©er un transporteur de test pour le d√©veloppement
  setupTestTransporter() {// Cr√©er un compte de test avec Ethereal Email
    nodemailer.createTestAccount((err, account) => {
      if (err) {
        console.error('‚ùå Impossible de cr√©er un compte de test Ethereal:', err);
        return;
      }
      
      // Cr√©er un transporteur avec le compte de test
      this.transporter = nodemailer.createTransport({
        host: account.smtp.host,
        port: account.smtp.port,
        secure: account.smtp.secure,
        auth: {
          user: account.user,
          pass: account.pass
        },
        debug: true // Activer le d√©bogage
      });
      
      // Initialisation des templates
      this.initializeTemplates();
      
      // Modifier la m√©thode sendEmail pour afficher le lien vers le message
      const originalSendEmail = this.sendEmail.bind(this);
      this.sendEmail = async (options) => {
        const result = await originalSendEmail(options);
        
        if (result.success && result.info) {
          console.log('‚úÖ Email de test envoy√©, voir le message ici:', nodemailer.getTestMessageUrl(result.info));
        }
        
        return result;
      };
    });
  }
  
  // V√©rifier la connexion au serveur SMTP
  async verifyTransporter() {
    try {
      if (!this.transporter) {
        console.error('‚ùå Transporteur email non initialis√©');
        return;
      }
      
      await this.transporter.verify();
      console.log('‚úÖ Connexion au serveur SMTP r√©ussie');
    } catch (error) {
      console.error('‚ùå √âchec de la connexion au serveur SMTP:', error);
    }
  }

  // Charger les templates d'email
  initializeTemplates() {
    try {
      // Chemin vers le dossier des templates
      const templatesDir = path.join(__dirname, '../templates/emails');
      
      // V√©rification si le dossier existe
      if (!fs.existsSync(templatesDir)) {
        console.warn('‚ö†Ô∏è Le dossier des templates d\'email n\'existe pas encore');
        fs.mkdirSync(templatesDir, { recursive: true });
        
        // Cr√©er un template de base si aucun n'existe
        const defaultTemplate = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>{{title}}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #3b82f6; color: white; padding: 10px 20px; }
            .content { padding: 20px; border: 1px solid #ddd; }
            .footer { text-align: center; margin-top: 20px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>{{title}}</h1>
            </div>
            <div class="content">
              {{{body}}}
            </div>
            <div class="footer">
              <p>¬© {{year}} Syst√®me de Gestion des Chauffeurs</p>
            </div>
          </div>
        </body>
        </html>
        `;
        
        fs.writeFileSync(path.join(templatesDir, 'default.html'), defaultTemplate);
        fs.writeFileSync(path.join(templatesDir, 'movement-notification.html'), defaultTemplate);
      } else {
      }
      
      // Charger les templates
      this.templates = {
        default: this.compileTemplate('default.html'),
        movementNotification: this.compileTemplate('movement-notification.html')
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation des templates d\'email:', error);
    }
  }

  // Compiler un template avec Handlebars
  compileTemplate(templateName) {
    try {
      const templatePath = path.join(__dirname, '../templates/emails', templateName);
      
      if (!fs.existsSync(templatePath)) {
        console.warn(`‚ö†Ô∏è Template ${templateName} non trouv√©, utilisation du template par d√©faut`);
        return handlebars.compile('{{body}}');
      }
      
      const templateSource = fs.readFileSync(templatePath, 'utf8');
      return handlebars.compile(templateSource);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la compilation du template ${templateName}:`, error);
      return handlebars.compile('{{body}}');
    }
  }

  // Envoyer un email
  async sendEmail(options) {
    try {
      const { to, subject, templateName = 'default', context = {} } = options;
      
      // V√©rifier les param√®tres obligatoires
      if (!to || !subject) {
        console.error('‚ùå Erreur: "to" et "subject" sont requis pour l\'envoi d\'email');
        throw new Error('Les param√®tres "to" et "subject" sont requis');
      }
      
      // V√©rifier si le transporteur est initialis√©
      if (!this.transporter) {
        console.error('‚ùå Erreur: Transporteur email non initialis√©');
        return {
          success: false,
          error: 'Transporteur email non initialis√©'
        };
      }
      
      // R√©cup√©rer le template appropri√© ou utiliser le template par d√©faut
      const template = this.templates[templateName] || this.templates.default;
      
      // Ajouter l'ann√©e actuelle au contexte
      const enrichedContext = {
        ...context,
        year: new Date().getFullYear()
      };
      
      // G√©n√©rer le contenu HTML
      const html = template(enrichedContext);
      
      // Configuration de l'email
      const mailOptions = {
        from: process.env.EMAIL_FROM || '"YSG convoyage" <convoyages@yourservices-group.com>',
        to: Array.isArray(to) ? to.join(',') : to,
        subject,
        html
      };
      
      // Ajouter des CC si sp√©cifi√©s
      if (options.cc) {
        mailOptions.cc = Array.isArray(options.cc) ? options.cc.join(',') : options.cc;
      }
      
      // Ajouter des BCC si sp√©cifi√©s
      if (options.bcc) {
        mailOptions.bcc = Array.isArray(options.bcc) ? options.bcc.join(',') : options.bcc;
      }
      
      // Envoyer l'email
      const info = await this.transporter.sendMail(mailOptions);
      
      return {
        success: true,
        messageId: info.messageId,
        info
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email:', error);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Envoyer une notification de mouvement aux agences
  async sendMovementNotification(movement, departureAgency, arrivalAgency, driverInfo = null) {
    try {
      // V√©rifications des donn√©es
      if (!departureAgency || !arrivalAgency) {
        console.error('‚ùå Erreur: Informations d\'agence manquantes');
        throw new Error('Les informations d\'agence sont requises');
      }
      
      // Pr√©paration des destinataires - S'assurer que les deux emails sont inclus
      const recipients = [];
      
      // Ajouter l'email de l'agence de d√©part s'il existe
      if (departureAgency.email) {
        recipients.push(departureAgency.email);
      } else {
        console.warn('‚ö†Ô∏è L\'agence de d√©part n\'a pas d\'email');
      }
      
      // Ajouter l'email de l'agence d'arriv√©e s'il existe
      if (arrivalAgency.email) {
        recipients.push(arrivalAgency.email);
      } else {
        console.warn('‚ö†Ô∏è L\'agence d\'arriv√©e n\'a pas d\'email');
      }
      
      if (recipients.length === 0) {
        console.error('‚ùå Erreur: Aucune adresse email d\'agence disponible');
        throw new Error('Aucune adresse email d\'agence disponible');
      }
      
      console.log(`üìß Envoi de notification aux destinataires: ${recipients.join(', ')}`);
      
      // G√©n√©rer le PDF de bon de commande
      const pdfBuffer = await this.generateOrderPDF(movement, departureAgency, arrivalAgency, driverInfo);
      
      // Construction du sujet
      const subject = `Bon de commande - V√©hicule ${movement.licensePlate}`;
      
      // Corps simple du message
      const htmlBody = `
        <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
          <p>Bonjour,</p>
          <p>Veuillez trouver ci-joint votre bon de commande / convoyage avec YSG.</p>
          <p>Ce document contient toutes les informations n√©cessaires concernant le transport du v√©hicule ${movement.licensePlate}.</p>
          <p>Pour toute question, n'h√©sitez pas √† nous contacter.</p>
          <p>Cordialement,<br>L'√©quipe Your Services Group</p>
        </div>
      `;
      
      // Configuration de l'email - Envoyer explicitement √† tous les destinataires
      const mailOptions = {
        from: process.env.EMAIL_FROM || '"YSG Convoyage" <convoyages@yourservices-group.com>',
        to: recipients.join(','),  // Tous les destinataires comme destinataires principaux
        subject,
        html: htmlBody,
        attachments: [
          {
            filename: `bon_commande_${movement.licensePlate.replace(/\s+/g, '_')}.pdf`,
            content: pdfBuffer,
            contentType: 'application/pdf'
          }
        ]
      };
      
      // Envoyer l'email
      const info = await this.transporter.sendMail(mailOptions);
      
      console.log(`‚úÖ Email envoy√© avec succ√®s aux agences (ID: ${info.messageId})`);
      
      return {
        success: true,
        messageId: info.messageId,
        recipients: recipients,
        info
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi de la notification de mouvement avec PDF:', error);
      return { success: false, error: error.message };
    }
  }

  async calculateDistance(origin, destination) {
    try {
      if (!GOOGLE_MAPS_API_KEY) {
        console.error('‚ùå Cl√© API Google Maps non d√©finie');
        return null;
      }
  
      // V√©rifier que les coordonn√©es sont valides
      if (!origin?.latitude || !origin?.longitude || !destination?.latitude || !destination?.longitude) {
        console.error('‚ùå Coordonn√©es d\'origine ou de destination invalides');
        return null;
      }
  
      // Pr√©parer les coordonn√©es au format requis par l'API
      const originStr = `${origin.latitude},${origin.longitude}`;
      const destinationStr = `${destination.latitude},${destination.longitude}`;
  
      // Construire l'URL de l'API
      const url = `https://maps.googleapis.com/maps/api/distancematrix/json?units=metric&origins=${originStr}&destinations=${destinationStr}&key=${GOOGLE_MAPS_API_KEY}`;
  
      // Faire la requ√™te API
      const response = await axios.get(url);
      const data = response.data;
  
      // V√©rifier si la requ√™te a r√©ussi
      if (data.status !== 'OK') {
        console.error(`‚ùå Erreur API Google Maps: ${data.status}`);
        return null;
      }
  
      // V√©rifier si les donn√©es sont valides
      if (!data.rows || !data.rows[0] || !data.rows[0].elements || !data.rows[0].elements[0]) {
        console.error('‚ùå R√©ponse API Google Maps invalide');
        return null;
      }
  
      const element = data.rows[0].elements[0];
  
      // V√©rifier si l'itin√©raire a √©t√© trouv√©
      if (element.status !== 'OK') {
        console.error(`‚ùå Impossible de trouver un itin√©raire: ${element.status}`);
        return null;
      }
  
      // Extraire la distance en m√®tres et convertir en kilom√®tres
      const distanceInMeters = element.distance.value;
      const distanceInKm = distanceInMeters / 1000;
      return distanceInKm;
    } catch (error) {
      console.error('‚ùå Erreur lors du calcul de la distance avec Google Maps API:', error);
      return null;
    }
  }

  /**
 * Envoie une notification √† l'agence d'arriv√©e lorsqu'un chauffeur d√©marre un mouvement
 * @param {Object} movement - Le mouvement d√©marr√©
 * @param {Object} departureAgency - L'agence de d√©part
 * @param {Object} arrivalAgency - L'agence d'arriv√©e
 * @param {Object} driver - Le chauffeur
 * @returns {Promise<Object>} R√©sultat de l'envoi
 */
async sendDepartureNotification(movement, departureAgency, arrivalAgency, driver = null) {
  try {
    // V√©rifier que l'agence d'arriv√©e est d√©finie et a un email
    if (!arrivalAgency || !arrivalAgency.email) {
      console.error('‚ùå Erreur: Informations d\'agence d\'arriv√©e manquantes ou sans email');
      throw new Error('Les informations de l\'agence d\'arriv√©e sont requises');
    }
    
    // R√©cup√©rer l'email de l'agence d'arriv√©e
    const recipient = arrivalAgency.email;
    console.log(`üìß Envoi de notification de d√©part √†: ${recipient}`);
    
    // Construire le sujet avec des informations utiles
    const subject = `üöó V√©hicule ${movement.licensePlate} en route - Arriv√©e pr√©vue`;
    
    // Calculer l'heure d'arriv√©e estim√©e si d√©finie
    let estimatedArrival = 'Non d√©finie';
    if (movement.arrivalTime) {
      estimatedArrival = new Date(movement.arrivalTime).toLocaleString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } else if (movement.departureTime) {
      // Si l'heure d'arriv√©e n'est pas d√©finie mais l'heure de d√©part oui,
      // estimer l'arriv√©e en ajoutant un temps par d√©faut (par exemple 2 heures)
      const estimatedTime = new Date(movement.departureTime);
      estimatedTime.setHours(estimatedTime.getHours() + 2); // Ajouter 2 heures
      estimatedArrival = estimatedTime.toLocaleString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }) + ' (estimation)';
    }
    
    // Formater l'heure de d√©part
    const departureTime = movement.departureTime 
      ? new Date(movement.departureTime).toLocaleString('fr-FR', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        })
      : 'Non d√©finie';
    
    // Corps du message HTML
    const htmlBody = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <h2 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 10px;">Notification de d√©part d'un v√©hicule</h2>
        
        <p>Bonjour,</p>
        
        <p>Nous vous informons qu'un v√©hicule est maintenant <strong style="color: #2563eb;">en route</strong> vers votre agence.</p>
        
        <div style="background-color: #f3f4f6; padding: 15px; border-left: 4px solid #3b82f6; margin: 20px 0; border-radius: 0 5px 5px 0;">
          <h3 style="margin-top: 0; color: #1e40af;">D√©tails du v√©hicule</h3>
          <p><strong>Immatriculation:</strong> ${movement.licensePlate}</p>
          ${movement.vehicleModel ? `<p><strong>Mod√®le:</strong> ${movement.vehicleModel}</p>` : ''}
          <p><strong>Statut:</strong> <span style="color: #2563eb; font-weight: bold;">En route</span></p>
        </div>
        
        <div style="background-color: #f0f9ff; padding: 15px; border-left: 4px solid #0ea5e9; margin: 20px 0; border-radius: 0 5px 5px 0;">
          <h3 style="margin-top: 0; color: #0369a1;">Informations de trajet</h3>
          <p><strong>D√©part de:</strong> ${departureAgency ? departureAgency.name : movement.departureLocation.name}</p>
          <p><strong>Arriv√©e √†:</strong> ${arrivalAgency ? arrivalAgency.name : movement.arrivalLocation.name}</p>
          <p><strong>Heure de d√©part:</strong> ${departureTime}</p>
          <p><strong>Arriv√©e pr√©vue:</strong> ${estimatedArrival}</p>
        </div>
        
        ${driver ? `
        <div style="background-color: #f0fdf4; padding: 15px; border-left: 4px solid #10b981; margin: 20px 0; border-radius: 0 5px 5px 0;">
          <h3 style="margin-top: 0; color: #047857;">Chauffeur</h3>
          <p><strong>Nom:</strong> ${driver.fullName}</p>
        </div>
        ` : ''}
        
        ${movement.notes ? `
        <div style="background-color: #fffbeb; padding: 15px; border-left: 4px solid #f59e0b; margin: 20px 0; border-radius: 0 5px 5px 0;">
          <h3 style="margin-top: 0; color: #b45309;">Notes</h3>
          <p>${movement.notes}</p>
        </div>
        ` : ''}
        
        <p>Veuillez pr√©parer la r√©ception de ce v√©hicule. Pour toute question concernant ce mouvement, n'h√©sitez pas √† nous contacter.</p>
        
        <p>Cordialement,<br>L'√©quipe Your Services Group</p>
      </div>
    `;
    
    // Configuration de l'email
    const mailOptions = {
      from: process.env.EMAIL_FROM || '"YSG Convoyage" <convoyages@yourservices-group.com>',
      to: recipient,
      subject,
      html: htmlBody
    };
    
    // Ajouter le d√©partement en copie si un email est d√©fini
    if (departureAgency && departureAgency.email) {
      mailOptions.cc = departureAgency.email;
    }
    
    // Envoyer l'email
    const info = await this.transporter.sendMail(mailOptions);
    
    console.log(`‚úÖ Notification de d√©part envoy√©e avec succ√®s √† ${recipient} (ID: ${info.messageId})`);
    
    return {
      success: true,
      messageId: info.messageId,
      recipients: [recipient]
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de la notification de d√©part:', error);
    return { success: false, error: error.message };
  }
}

  // Nouvelle m√©thode pour g√©n√©rer un PDF similaire √† l'exemple fourni
  async generateOrderPDF(movement, departureAgency, arrivalAgency, driverInfo) {
    return new Promise(async (resolve, reject) => {
      try {
        // Calculer la distance r√©elle entre les agences via Google Maps API
        let distance = null;

        // V√©rifier si nous avons les coordonn√©es des deux agences
        if (departureAgency?.location?.coordinates && arrivalAgency?.location?.coordinates) {
          try {
            // S'assurer que les coordonn√©es sont des nombres
            const departureCoords = {
              latitude: parseFloat(departureAgency.location.coordinates.latitude),
              longitude: parseFloat(departureAgency.location.coordinates.longitude)
            };
            
            const arrivalCoords = {
              latitude: parseFloat(arrivalAgency.location.coordinates.latitude),
              longitude: parseFloat(arrivalAgency.location.coordinates.longitude)
            };
            
            // V√©rifier que les coordonn√©es sont valides apr√®s conversion
            if (!isNaN(departureCoords.latitude) && !isNaN(departureCoords.longitude) &&
                !isNaN(arrivalCoords.latitude) && !isNaN(arrivalCoords.longitude)) {
              
              // Calculer la distance r√©elle entre les agences
              // CORRECTION : Assignez le r√©sultat √† la variable distance
              distance = await this.calculateDistance(
                departureCoords,
                arrivalCoords
              );
              
              if (distance) {
                console.log(`‚úÖ Distance calcul√©e avec succ√®s: ${distance.toFixed(2)} km`);
              } else {
                console.warn('‚ö†Ô∏è Le calcul de distance a retourn√© null');
              }
            } else {
              console.error(`‚ùå Coordonn√©es invalides apr√®s conversion: ` +
                            `${JSON.stringify(departureCoords)} -> ${JSON.stringify(arrivalCoords)}`);
            }
          } catch (distanceError) {
            console.error('‚ùå Erreur lors du calcul de la distance:', distanceError);
          }
        }
        
        // Si la distance n'a pas pu √™tre calcul√©e, utiliser une valeur par d√©faut
        if (distance === null) {
          console.log('‚ö†Ô∏è Impossible de calculer la distance exacte, utilisation d\'une valeur estim√©e');
          // Estimer une distance "r√©aliste" entre 10 et 500 km
          distance = Math.floor(Math.random() * 490) + 10;
        }
        
        // Arrondir la distance √† 2 d√©cimales
        distance = Math.round(distance * 100) / 100;
        
        // Cr√©er un nouveau document PDF
        const doc = new PDFDocument({
          margins: {
            top: 50,
            bottom: 50,
            left: 50,
            right: 50
          },
          size: 'A4'
        });
        
        // Collecter les chunks du PDF dans un buffer
        const buffers = [];
        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => {
          const pdfBuffer = Buffer.concat(buffers);
          resolve(pdfBuffer);
        });
        
        // Convertir les objets Mongoose en objets JS simples si n√©cessaire
        const movementObj = movement.toObject ? movement.toObject() : {...movement};
        const departureObj = departureAgency.toObject ? departureAgency.toObject() : {...departureAgency};
        const arrivalObj = arrivalAgency.toObject ? arrivalAgency.toObject() : {...arrivalAgency};
        
        // Obtenir la date actuelle au format fran√ßais
        const currentDate = moment().format('DD.MM.YYYY');
        
        // *** PREMI√àRE SECTION: LOGO EN HAUT √Ä DROITE SEUL ***
        
        // Ajouter le logo YSG en haut √† droite
        const logoPath = path.join(__dirname, '../assets/logo.png');
        if (fs.existsSync(logoPath)) {
          doc.image(logoPath, 400, 30, { width: 75 });
        }
        
        // *** SECTION SUIVANTE: TITRE ET INFORMATIONS ***
        
        // Titre principal (centr√© horizontalement)
        doc.font('Helvetica-Bold').fontSize(16);
        doc.text('Bon de commande / Confirmation d\'enl√®vement', 50, 120, { align: 'center' });
        
        // Colonne gauche: Informations soci√©t√©
        doc.font('Helvetica').fontSize(11);
        doc.text('YOUR SERVICES GROUP', 50, 160);
        doc.text('47 BOULEVARD DE COURCELLES', 50, 175);
        doc.text('75008 PARIS', 50, 190);
        
        // Colonne droite: Informations du document
        doc.font('Helvetica').fontSize(11);
        doc.text(`Paris, le ${currentDate}`, 350, 160, { align: 'right' });
        doc.text(`Date de commande: ${currentDate}`, 350, 175, { align: 'right' });
        
        // Date de livraison
        if (movementObj.deadline) {
          const deliveryDate = moment(movementObj.deadline).format('DD.MM.YYYY');
          doc.text(`Date de livraison: ${deliveryDate}`, 350, 190, { align: 'right' });
        } else {
          const deliveryDate = moment(currentDate, 'DD.MM.YYYY').add(1, 'days').format('DD.MM.YYYY');
          doc.text(`Date de livraison: ${deliveryDate}`, 350, 190, { align: 'right' });
        }
        
        // *** SECTION TABLEAU: INFORMATIONS DU V√âHICULE ***
        
        // Texte d'introduction
        doc.moveDown(3);
        doc.text('Nos avons √©t√© mandat√© pour le transport du v√©hicule suivant:', 50, 245);
        
        // Tableau des v√©hicules (ent√™tes)
        const tableY = 270;
        doc.font('Helvetica-Bold').fontSize(10);
        doc.text('V√©hicule', 50, tableY);
        doc.text('D√©tails', 200, tableY);
        doc.text('Enl√®vement', 300, tableY);
        doc.text('Livraison', 430, tableY);
        
        // Ligne horizontale
        doc.moveTo(50, tableY + 15).lineTo(550, tableY + 15).stroke();
        
        // Donn√©es du v√©hicule
        doc.font('Helvetica').fontSize(10);
        
        // Colonne V√©hicule
        const vehicleY = tableY + 25;
        doc.text(movementObj.licensePlate || 'N/A', 50, vehicleY);
        if (movementObj.vehicleModel) {
          doc.text(movementObj.vehicleModel, 50, vehicleY + 15);
        }
        
        // Colonne D√©tails - Utiliser la distance calcul√©e avec Google Maps
        doc.text(`${distance.toFixed(2)} km`, 200, vehicleY);
        
        // Colonne Enl√®vement
        doc.text(departureObj.name || 'N/A', 300, vehicleY);
        doc.text(departureObj.address || 'N/A', 300, vehicleY + 15, { width: 120 });
        
        // Colonne Livraison
        doc.text(arrivalObj.name || 'N/A', 430, vehicleY);
        doc.text(arrivalObj.address || 'N/A', 430, vehicleY + 15, { width: 120 });
        
        // *** SECTION FINALE: INFORMATIONS JURIDIQUES ET SIGNATURES ***
        
        // Accord tarifaire
        doc.moveDown(3);
        const accordY = vehicleY + 80;
        doc.text('Accord tarifaire individuel', 50, accordY);
        
        // Zone de signature
        const signatureY = accordY + 30;
        doc.moveTo(50, signatureY).lineTo(250, signatureY).stroke();
        doc.text('Lieu, Date', 50, signatureY + 5);
        
        doc.moveTo(350, signatureY).lineTo(550, signatureY).stroke();
        doc.text('Signature du conducteur', 350, signatureY + 5);
        
        doc.fontSize((6.5));
        doc.text('Les chargements et d√©chargements doivent avoir lieu durant les horaires d\'ouverture de l\'agence. Le prestataire en charge du transport est responsable de la v√©rification de l\'√©tat des v√©hicules. Toute anomalie doit √™tre signal√©e sur le bon de transport.',
          50, signatureY + 300, { align: 'center', width: 500 });
        doc.text('Veuillez-vous r√©f√©rer au contrat cadre de transport pour les modalit√©s d√©taill√©es.',
          50, signatureY + 315, { align: 'center', width: 500 });
        
        // Note finale
        doc.text('Ceci est une commande √©lectronique et est valable sans signature.', 50, signatureY + 330, { align: 'center', width: 500 });
        
        // Finaliser le document
        doc.end();
        
      } catch (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration du PDF:', error);
        reject(error);
      }
    });
  }

  async generateAndStoreOrderPDF(movement, departureAgency, arrivalAgency, driverInfo) {
    // G√©n√©rer le PDF comme avant
    const pdfBuffer = await emailService.generateOrderPDF(
      movement, departureAgency, arrivalAgency, driverInfo
    );
    
    // Cr√©er un nom de fichier unique
    const fileName = `order_${movement._id}_${Date.now()}.pdf`;
    
    // Stocker le PDF sur S3 (similaire √† uploadService.uploadDirect)
    const { presignedUrl, fileUrl } = await uploadService.getPresignedUrl(
      'application/pdf',
      fileName,
      'orders'
    );
    
    // Upload direct vers S3
    await fetch(presignedUrl, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/pdf' },
      body: pdfBuffer
    });
    
    // Mettre √† jour le mouvement avec l'URL du PDF
    movement.orderForm = {
      url: fileUrl,
      createdAt: new Date(),
      version: 1
    };
    
    await movement.save();
    
    return {
      buffer: pdfBuffer,
      url: fileUrl
    };
  }

  // Fonction utilitaire pour traduire les statuts
  translateStatus(status) {
    const statusMap = {
      'pending': 'En attente',
      'assigned': 'Assign√©',
      'preparing': 'En pr√©paration',
      'in-progress': 'En cours',
      'completed': 'Termin√©',
      'cancelled': 'Annul√©'
    };
    
    return statusMap[status] || status;
  }
}

// Export d'une instance unique
module.exports = new EmailService();